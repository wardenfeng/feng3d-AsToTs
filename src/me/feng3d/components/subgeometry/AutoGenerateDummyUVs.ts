module feng3d {




	/**
	 * 自动生成虚拟UV
	 * @author feng 2015-12-8
	 */
    export class AutoGenerateDummyUVs extends SubGeometryComponent {
        private dataTypeId: string;
        private target: number[];
        private needGenerate: boolean;

        constructor() {
            super();
            this.dataTypeId = this._.uv_va_2;

        }

        protected set subGeometry(value: SubGeometry) {
            if (this._subGeometry != null) {
                this._subGeometry.removeEventListener(GeometryComponentEvent.GET_VA_DATA, this.onGetVAData);
                this._subGeometry.removeEventListener(GeometryComponentEvent.CHANGED_VA_DATA, this.onChangedVAData);
            }
            this._subGeometry = value;
            if (this._subGeometry != null) {
                this._subGeometry.addEventListener(GeometryComponentEvent.GET_VA_DATA, this.onGetVAData);
                this._subGeometry.addEventListener(GeometryComponentEvent.CHANGED_VA_DATA, this.onChangedVAData);
            }
        }

		/**
		 * 处理被添加事件
		 * @param event
		 */
        protected onBeAddedComponet(event: ComponentEvent) {
            super.onBeAddedComponet(event);

            this.needGenerate = true;
            this.subGeometry.invalidVAData(this.dataTypeId);
        }

        protected onGetVAData(event: GeometryComponentEvent) {
            if (event.data != this.dataTypeId)
                return;
            if (!this.needGenerate)
                return;
            this.target = this.updateDummyUVs(this.target);
            this.subGeometry.setVAData(this.dataTypeId, this.target);

            this.needGenerate = false;
        }

		/**
		 * 更新虚拟uv
		 * @param target 虚拟uv(输出)
		 * @return 虚拟uv
		 */
        private updateDummyUVs(target: number[]): number[] {
            var idx: number, uvIdx: number;
            var stride: number = 2;
            var len: number = this.subGeometry.numVertices * stride;

            if (!target)
                target = [];
            target.length = len;

            idx = 0;
            uvIdx = 0;
            while (idx < len) {
                target[idx++] = uvIdx * .5;
                target[idx++] = 1.0 - (uvIdx & 1);

                if (++uvIdx == 3)
                    uvIdx = 0;
            }

            return target;
        }

        protected onChangedVAData(event: GeometryComponentEvent) {
            if (event.data == this._.position_va_3) {
                this.needGenerate = true;
            }
        }
    }
}
